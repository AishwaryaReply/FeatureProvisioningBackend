{
  "swagger": "2.0",
  "host": "",
  "basePath": "/",
  "info": {
    "version": "v2.0",
    "title": "${SWAGGER_TITLE}",
    "description": "${SWAGGER_DESCRIPTION}"
  },
  "schemes": [
    "https"
  ],
  "definitions": {
    "TransportationOption": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "Phone": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "number": {
          "type": "string"
        }
      }
    },
    "Email": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "email": {
          "type": "string"
        }
      }
    },
    "GenericAppointment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "opCode": {
          "type": "string"
        },
        "price": {
          "type": "number"
        },
        "analyticsMsrp": {
          "type": "number"
        },
        "laborHours": {
          "type": "number"
        },
        "selected": {
          "type": "boolean"
        },
        "maintenanceKind": {
          "type": "string"
        },
        "comment": {
          "type": "string"
        }
      }
    },
    "Mileage": {
      "type": "object",
      "properties": {
        "value": {
          "type": "number"
        },
        "unitsKind": {
          "type": "string"
        }
      }
    },
    "Customer": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "phones": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Phone"
          }
        },
        "emails": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Email"
          }
        },
        "scheduledTime": {
          "type": "string"
        },
        "mileage": {
          "$ref": "#/definitions/Mileage"
        },
        "status": {
          "type": "string"
        },
        "customerConcernsInfo": {
          "type": "string"
        },
        "confirmationCode": {
          "type": "string"
        },
        "advisor": {
          "$ref": "#/definitions/Advisor"
        },
        "transportationOption": {
          "$ref": "#/definitions/TransportationOption"
        },
        "services": {
          "type": "object",
          "properties": {
            "summary": {
              "$ref": "#/definitions/AppointmentSummaryResponse"
            },
            "drs": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GenericAppointment"
              }
            },
            "frs": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GenericAppointment"
              }
            },
            "repair": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GenericAppointment"
              }
            },
            "recalls": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GenericAppointment"
              }
            }
          }
        }
      }
    },
    "GetAppointmentDetailsResponse": {
      "type": "object",
      "properties": {
        "customer": {
          "$ref": "#/definitions/Customer"
        }
      },
      "example": {
        "customer": {
          "id": "urn:dfx:customer:103129767",
          "firstName": "TEST",
          "lastName": "FCA",
          "phones": [
            {
              "type": "default",
              "number": 2484206482
            },
            {
              "type": "home",
              "number": 2484206482
            }
          ],
          "emails": [
            {
              "type": "business",
              "email": "testkh19@gmail.com"
            },
            {
              "type": "personal",
              "email": "testkh20@gmail.com"
            }
          ]
        },
        "scheduledTime": "2020-10-27T08:45:00.00-04:00",
        "mileage": {
          "value": 120,
          "unitsKind": "mileage"
        },
        "status": "booked",
        "customerConcernsInfo": "vehicle to repair",
        "confirmationCode": "OSS-W9L0O",
        "advisor": {
          "id": 332708,
          "name": "Albert Pico",
          "departmentId": 4836
        },
        "transportationOption": {
          "code": "waiter",
          "description": "waiter",
          "enabled": false
        },
        "services": {
          "summary": {
            "taxes": 10.1,
            "subTotal": 20.1,
            "total": 30.2
          },
          "drs": [],
          "frs": [
            {
              "id": 82893,
              "name": "Replace engine oil and filter",
              "opCode": 30,
              "price": 69.95,
              "analyticsMsrp": 69.95,
              "laborHours": 0,
              "selected": false,
              "maintenanceKind": "Required",
              "comment": ""
            }
          ],
          "repair": [],
          "recalls": []
        }
      }
    },
    "Appointment": {
      "type": "object",
      "properties": {
        "appointmentid": {
          "type": "string"
        },
        "departmentid": {
          "type": "string"
        },
        "scheduledTime": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "GetServiceAppointmentResponse": {
      "type": "object",
      "properties": {
        "appointments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Appointment"
          }
        }
      },
      "example": {
        "appointments": [
          {
            "appointmentId": 53826276,
            "departmentId": 4836,
            "scheduledTime": "2020-10-07T09:15:00.00-04:00",
            "status": "missed"
          },
          {
            "appointmentId": 54194795,
            "departmentId": 4836,
            "scheduledTime": "2020-10-19T09:00:00.00-04:00",
            "status": "booked"
          }
        ]
      }
    },
    "PutUpdateResponse": {
      "type": "object",
      "properties": {
        "confirmationCode": {
          "type": "string"
        }
      },
      "example": {
        "status": "booked",
        "confirmationCode": "OSS-WAUNV"
      }
    },
    "PostAppointmentResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        },
        "confirmationCode": {
          "type": "string"
        }
      },
      "example": {
        "status": "booked",
        "confirmationCode": "OSS-WAUNV"
      }
    },
    "SlotA": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "count": {
          "type": "number"
        }
      }
    },
    "SlotT": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "count": {
          "type": "number"
        }
      }
    },
    "SA": {
      "type": "object",
      "properties": {
        "slots": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SlotA"
          }
        }
      }
    },
    "ST": {
      "type": "object",
      "properties": {
        "slots": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SlotT"
          }
        }
      }
    },
    "Segment": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string"
        },
        "slots": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "time": {
                "type": "string"
              },
              "serviceAdvisors": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/SA"
                }
              },
              "transportationOptions": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ST"
                }
              }
            }
          }
        }
      }
    },
    "TimeSegmentsResponse": {
      "type": "object",
      "properties": {
        "segments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Segment"
          }
        }
      },
      "example": {
        "segments": [
          {
            "date": "2020-11-25",
            "slots": [
              {
                "time": "07:30:00.00-05:00",
                "serviceAdvisors": [
                  {
                    "id": 101336
                  },
                  {
                    "id": 127487
                  }
                ],
                "transportationOptions": [
                  {
                    "code": "waiter"
                  },
                  {
                    "code": "own-ride"
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    "Option": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "TransportationOptionResponse": {
      "type": "object",
      "properties": {
        "transportationOptions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Option"
          }
        }
      },
      "example": {
        "transportationOptions": [
          {
            "code": "waiter",
            "description": "Waiter"
          },
          {
            "code": "own-ride",
            "description": "Own-ride"
          }
        ]
      }
    },
    "Advisor": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "GetAdvisorsResponse": {
      "type": "object",
      "properties": {
        "serviceAdvisors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Advisor"
          }
        }
      },
      "example": {
        "serviceAdvisors": [
          {
            "id": 332708,
            "name": "Crystal Rentas"
          },
          {
            "id": 959285,
            "name": "Jose Gomez"
          }
        ]
      }
    },
    "AppointmentSummaryResponse": {
      "type": "object",
      "properties": {
        "taxes": {
          "type": "number"
        },
        "subTotal": {
          "type": "number"
        },
        "total": {
          "type": "number"
        }
      },
      "example": {
        "taxes": 10.1,
        "subTotal": 20.1,
        "total": 30.2
      }
    },
    "DealerDepartmentResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "example": {
        "id": 4836
      }
    },
    "SearchVehicles": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "vin": {
            "type": "string"
          }
        }
      }
    },
    "SearchEmail": {
      "type": "object",
      "properties": {
        "customerId": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "foundType": {
          "type": "string"
        }
      },
      "example": {
        "customerId": "urn:dfx:customer:103129767",
        "email": "testkh19@gmail.com",
        "foundType": "byEmail"
      }
    },
    "SearchVin": {
      "type": "object",
      "properties": {
        "customerId": {
          "type": "string"
        },
        "foundType": {
          "type": "string"
        },
        "vehicles": {
          "$ref": "#/definitions/SearchVehicles"
        }
      },
      "example": {
        "customerId": "urn:dfx:customer:103129767",
        "foundType": "byVin",
        "vehicles": [
          {
            "vin": "2C3CCAGG7LH2003XM"
          }
        ]
      }
    },
    "ServicePostAppointmentParams": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number"
        },
        "comment": {
          "type": "string"
        }
      }
    },
    "ServicesPostAppointment": {
      "type": "object",
      "properties": {
        "drs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServicePostAppointmentParams"
          }
        },
        "frs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServicePostAppointmentParams"
          }
        },
        "repair": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServicePostAppointmentParams"
          }
        }
      }
    },
    "PostAppointmentRequest": {
      "type": "object",
      "properties": {
        "customerId": {
          "type": "string"
        },
        "customerConcernsInfo": {
          "type": "string"
        },
        "advisorId": {
          "type": "number"
        },
        "transportationOptionCode": {
          "type": "string"
        },
        "scheduledTime": {
          "type": "string"
        },
        "mileage": {
          "$ref": "#/definitions/Mileage"
        },
        "services": {
          "$ref": "#/definitions/ServicesPostAppointment"
        }
      }
    },
    "PutAppointmentRequest": {
      "type": "object",
      "properties": {
        "customerId": {
          "type": "string"
        },
        "customerConcernsInfo": {
          "type": "string"
        },
        "advisorId": {
          "type": "number"
        },
        "transportationOptionCode": {
          "type": "string"
        },
        "scheduledTime": {
          "type": "string"
        },
        "mileage": {
          "$ref": "#/definitions/Mileage"
        },
        "services": {
          "$ref": "#/definitions/ServicesPostAppointment"
        }
      }
    },
    "ServiceId": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number"
        }
      }
    },
    "Service": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "price": {
          "type": "string"
        }
      }
    },
    "ServicesResponse": {
      "type": "object",
      "properties": {
        "services": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Service"
          }
        }
      },
      "example": {
        "services": [
          {
            "id": 82893,
            "name": "Replace engine oil and filter",
            "price": 69.95
          }
        ]
      }
    },
    "OssVehicleResponse": {
      "type": "object",
      "properties": {
        "vin": {
          "type": "string"
        },
        "make": {
          "type": "string"
        },
        "year": {
          "type": "string"
        },
        "model": {
          "type": "string"
        },
        "transmission": {
          "type": "string"
        },
        "engine": {
          "type": "string"
        },
        "train": {
          "type": "string"
        }
      },
      "example": {
        "vin": "2C3CCAGG7LH2003XM",
        "make": "CHRYSLER",
        "year": 2020,
        "model": "300 (3.6L)",
        "transmission": "Automatic",
        "engine": "6CYL",
        "train": "4WD"
      }
    },
    "TokenResponse": {
      "type": "object",
      "required": [
        "accessToken",
        "tokenType",
        "expiresIn"
      ],
      "properties": {
        "accessToken": {
          "type": "string"
        },
        "tokenType": {
          "type": "string"
        },
        "expiresIn": {
          "type": "number"
        }
      },
      "example": {
        "accessToken": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJhcHA6Ly9sb2NhbC9kZWFsZXItaWQiOjUxNTEsInVybjpkZng6YXBwOnRoZW1lIjoiZmNhIiwidXJuOmRmeDphcHA6Y3VsdHVyZSI6ImVuLXVzIiwiYXBwOi8vbG9jYWwvY2xpZW50LWFkZHJlc3MiOiIxMC4wLjEzMC40MyIsImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vd3MvMjAwOC8wNi9pZGVudGl0eS9jbGFpbXMvYXV0aGVudG",
        "tokenType": "bearer",
        "expiresIn": 86399
      }
    },
    "Router400ErrorResponse": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "name": {
          "type": "string",
          "enum": [
            "Bad Request"
          ]
        },
        "message": {
          "type": "string",
          "description": "Missing/Invalid Parameter in Request"
        }
      }
    },
    "Router401ErrorResponse": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "name": {
          "type": "string",
          "enum": [
            "Unauthorized"
          ]
        },
        "message": {
          "type": "string",
          "description": "Error message the possible values can be - User not authorized"
        }
      }
    },
    "Router403ErrorResponse": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "name": {
          "type": "string",
          "enum": [
            "Not Found"
          ]
        },
        "message": {
          "type": "string",
          "description": "description of the error response"
        }
      }
    },
    "Router404ErrorResponse": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "name": {
          "type": "string",
          "enum": [
            "System Exception"
          ]
        },
        "message": {
          "type": "string",
          "description": "description of the error response, values can be - Resource Not Found"
        }
      }
    },
    "Router500ErrorResponse": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "name": {
          "type": "string",
          "enum": [
            "Bad Gateway"
          ]
        },
        "message": {
          "type": "string",
          "description": "description of the error response, values can be - Internal Server Error"
        }
      }
    },
    "Router502ErrorResponse": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "name": {
          "type": "string",
          "enum": [
            "Bad Gateway"
          ]
        },
        "message": {
          "type": "string",
          "description": "Description of the error message - possible values can be Proxy Integration Failed"
        }
      }
    }
  },
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "name": "x-api-key",
      "in": "header"
    },
    "sigv4": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header",
      "x-amazon-apigateway-authtype": "awsSigv4"
    }
  },
  "x-amazon-apigateway-request-validators": {
    "Validate body, query string parameters, and headers": {
      "validateRequestParameters": true,
      "validateRequestBody": true
    }
  },
  "paths": {
    "/v1/servicescheduler/token": {
      "get": {
        "tags": [
          "Service Scheduler"
        ],
        "summary": "Get the authentication token for OSS API.",
        "description": "This API returns the authentication token for OSS API.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "x-clientapp-name",
            "description": "Name of the Client application",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "x-clientapp-version",
            "description": "Version of the client applications software",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "content-type",
            "description": "application/json ",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-api-key",
            "description": "API key for the Service ",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "clientrequestid",
            "description": "To be generated by Client (Last 10 digits of uid_epoch_6digit random)",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "Locale",
            "description": "Locale of user. Coded according to ISO-639 (e.g. “en”) and optionally extended by a country code (e.g. “en_US”).  ",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "x-device-id",
            "description": "An identifier that uniquely identifies the client device, or calling system like IMEI code. optional for webapp",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "x-originator-type",
            "description": "The originating clients type: app, web ,server",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "hintdealer",
            "description": "oss token got by the dealer",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "schema": {
              "$ref": "#/definitions/TokenResponse"
            }
          },
          "400": {
            "description": "400 response",
            "schema": {
              "$ref": "#/definitions/Router400ErrorResponse"
            }
          },
          "401": {
            "description": "401 response",
            "schema": {
              "$ref": "#/definitions/Router401ErrorResponse"
            }
          },
          "403": {
            "description": "403 response",
            "schema": {
              "$ref": "#/definitions/Router403ErrorResponse"
            }
          },
          "500": {
            "description": "500 response",
            "schema": {
              "$ref": "#/definitions/Router500ErrorResponse"
            }
          },
          "502": {
            "description": "502 response",
            "schema": {
              "$ref": "#/definitions/Router502ErrorResponse"
            }
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "sigv4": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "uri": "arn:aws:apigateway:${DEPLOY_REGION}:lambda:path/2015-03-31/functions/arn:aws:lambda:${DEPLOY_REGION}:${SDPR_ACCOUNT_ID}:function:SDPR_${FEATURE_CODE}_${ENVIRONMENT}_${DEPLOY_REGION}_SC001-service-scheduler-manager:gsdp/invocations",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws_proxy"
        }
      },
      "options": {
        "responses": {},
        "x-amazon-apigateway-integration": {
          "credentials": "arn:aws:iam::${SDPR_ACCOUNT_ID}:role/${CORS_LAMBDA_INVOKE_ROLE_NAME}",
          "uri": "arn:aws:apigateway:${DEPLOY_REGION}:lambda:path/2015-03-31/functions/arn:aws:lambda:${DEPLOY_REGION}:${SDPR_ACCOUNT_ID}:function:${CORS_LAMBDA_NAME}/invocations",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws_proxy"
        }
      }
    },
    "/v1/accounts/{userid}/vehicles/{vin}/servicescheduler/ossvehicle": {
      "get": {
        "tags": [
          "Service Scheduler"
        ],
        "summary": "Get the vehicle info stored in Oss.",
        "description": "This API returns the vehicle info stored in Oss.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userid",
            "description": "unique identifier of user - Gigya id for user",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "vin",
            "description": "Vehicle Identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-clientapp-name",
            "description": "Name of the Client application",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "x-clientapp-version",
            "description": "Version of the client applications software",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "content-type",
            "description": "application/json ",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-api-key",
            "description": "API key for the Service ",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "clientrequestid",
            "description": "To be generated by Client (Last 10 digits of uid_epoch_6digit random)",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "Locale",
            "description": "Locale of user. Coded according to ISO-639 (e.g. “en”) and optionally extended by a country code (e.g. “en_US”).  ",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "x-device-id",
            "description": "An identifier that uniquely identifies the client device, or calling system like IMEI code. optional for webapp",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "x-originator-type",
            "description": "The originating clients type: app, web ,server",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "dealer-authorization",
            "description": "oss token got by the dealer",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "schema": {
              "$ref": "#/definitions/OssVehicleResponse"
            }
          },
          "400": {
            "description": "400 response",
            "schema": {
              "$ref": "#/definitions/Router400ErrorResponse"
            }
          },
          "401": {
            "description": "401 response",
            "schema": {
              "$ref": "#/definitions/Router401ErrorResponse"
            }
          },
          "403": {
            "description": "403 response",
            "schema": {
              "$ref": "#/definitions/Router403ErrorResponse"
            }
          },
          "500": {
            "description": "500 response",
            "schema": {
              "$ref": "#/definitions/Router500ErrorResponse"
            }
          },
          "502": {
            "description": "502 response",
            "schema": {
              "$ref": "#/definitions/Router502ErrorResponse"
            }
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "sigv4": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "uri": "arn:aws:apigateway:${DEPLOY_REGION}:lambda:path/2015-03-31/functions/arn:aws:lambda:${DEPLOY_REGION}:${SDPR_ACCOUNT_ID}:function:SDPR_${FEATURE_CODE}_${ENVIRONMENT}_${DEPLOY_REGION}_SC001-service-scheduler-manager:gsdp/invocations",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws_proxy"
        }
      },
      "options": {
        "responses": {},
        "x-amazon-apigateway-integration": {
          "credentials": "arn:aws:iam::${SDPR_ACCOUNT_ID}:role/${CORS_LAMBDA_INVOKE_ROLE_NAME}",
          "uri": "arn:aws:apigateway:${DEPLOY_REGION}:lambda:path/2015-03-31/functions/arn:aws:lambda:${DEPLOY_REGION}:${SDPR_ACCOUNT_ID}:function:${CORS_LAMBDA_NAME}/invocations",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws_proxy"
        }
      }
    },
    "/v1/accounts/{userid}/vehicles/{vin}/servicescheduler/factoryservices": {
      "get": {
        "tags": [
          "Service Scheduler"
        ],
        "summary": "Get the list of factory services for a specific vehicle.",
        "description": "This API returns the list of factory services for a specific vehicle.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "mileage",
            "description": "distance in mileage",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "userid",
            "description": "unique identifier of user - Gigya id for user",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "vin",
            "description": "Vehicle Identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-clientapp-name",
            "description": "Name of the Client application",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "x-clientapp-version",
            "description": "Version of the client applications software",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "content-type",
            "description": "application/json ",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-api-key",
            "description": "API key for the Service ",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "clientrequestid",
            "description": "To be generated by Client (Last 10 digits of uid_epoch_6digit random)",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "Locale",
            "description": "Locale of user. Coded according to ISO-639 (e.g. “en”) and optionally extended by a country code (e.g. “en_US”).  ",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "x-device-id",
            "description": "An identifier that uniquely identifies the client device, or calling system like IMEI code. optional for webapp",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "x-originator-type",
            "description": "The originating clients type: app, web ,server",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "dealer-authorization",
            "description": "oss token got by the dealer",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "schema": {
              "$ref": "#/definitions/ServicesResponse"
            }
          },
          "400": {
            "description": "400 response",
            "schema": {
              "$ref": "#/definitions/Router400ErrorResponse"
            }
          },
          "401": {
            "description": "401 response",
            "schema": {
              "$ref": "#/definitions/Router401ErrorResponse"
            }
          },
          "403": {
            "description": "403 response",
            "schema": {
              "$ref": "#/definitions/Router403ErrorResponse"
            }
          },
          "500": {
            "description": "500 response",
            "schema": {
              "$ref": "#/definitions/Router500ErrorResponse"
            }
          },
          "502": {
            "description": "502 response",
            "schema": {
              "$ref": "#/definitions/Router502ErrorResponse"
            }
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "sigv4": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "uri": "arn:aws:apigateway:${DEPLOY_REGION}:lambda:path/2015-03-31/functions/arn:aws:lambda:${DEPLOY_REGION}:${SDPR_ACCOUNT_ID}:function:SDPR_${FEATURE_CODE}_${ENVIRONMENT}_${DEPLOY_REGION}_SC001-service-scheduler-manager:gsdp/invocations",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws_proxy"
        }
      },
      "options": {
        "responses": {},
        "x-amazon-apigateway-integration": {
          "credentials": "arn:aws:iam::${SDPR_ACCOUNT_ID}:role/${CORS_LAMBDA_INVOKE_ROLE_NAME}",
          "uri": "arn:aws:apigateway:${DEPLOY_REGION}:lambda:path/2015-03-31/functions/arn:aws:lambda:${DEPLOY_REGION}:${SDPR_ACCOUNT_ID}:function:${CORS_LAMBDA_NAME}/invocations",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws_proxy"
        }
      }
    },
    "/v1/accounts/{userid}/vehicles/{vin}/servicescheduler/dealerservices": {
      "get": {
        "tags": [
          "Service Scheduler"
        ],
        "summary": "Get the list of dealer services for a specific vehicle.",
        "description": "This API returns the list of dealer services for a specific vehicle.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "mileage",
            "description": "distance in mileage",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "userid",
            "description": "unique identifier of user - Gigya id for user",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "vin",
            "description": "Vehicle Identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-clientapp-name",
            "description": "Name of the Client application",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "x-clientapp-version",
            "description": "Version of the client applications software",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "content-type",
            "description": "application/json ",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-api-key",
            "description": "API key for the Service ",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "clientrequestid",
            "description": "To be generated by Client (Last 10 digits of uid_epoch_6digit random)",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "Locale",
            "description": "Locale of user. Coded according to ISO-639 (e.g. “en”) and optionally extended by a country code (e.g. “en_US”).  ",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "x-device-id",
            "description": "An identifier that uniquely identifies the client device, or calling system like IMEI code. optional for webapp",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "x-originator-type",
            "description": "The originating clients type: app, web ,server",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "dealer-authorization",
            "description": "oss token got by the dealer",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "schema": {
              "$ref": "#/definitions/ServicesResponse"
            }
          },
          "400": {
            "description": "400 response",
            "schema": {
              "$ref": "#/definitions/Router400ErrorResponse"
            }
          },
          "401": {
            "description": "401 response",
            "schema": {
              "$ref": "#/definitions/Router401ErrorResponse"
            }
          },
          "403": {
            "description": "403 response",
            "schema": {
              "$ref": "#/definitions/Router403ErrorResponse"
            }
          },
          "500": {
            "description": "500 response",
            "schema": {
              "$ref": "#/definitions/Router500ErrorResponse"
            }
          },
          "502": {
            "description": "502 response",
            "schema": {
              "$ref": "#/definitions/Router502ErrorResponse"
            }
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "sigv4": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "uri": "arn:aws:apigateway:${DEPLOY_REGION}:lambda:path/2015-03-31/functions/arn:aws:lambda:${DEPLOY_REGION}:${SDPR_ACCOUNT_ID}:function:SDPR_${FEATURE_CODE}_${ENVIRONMENT}_${DEPLOY_REGION}_SC001-service-scheduler-manager:gsdp/invocations",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws_proxy"
        }
      },
      "options": {
        "responses": {},
        "x-amazon-apigateway-integration": {
          "credentials": "arn:aws:iam::${SDPR_ACCOUNT_ID}:role/${CORS_LAMBDA_INVOKE_ROLE_NAME}",
          "uri": "arn:aws:apigateway:${DEPLOY_REGION}:lambda:path/2015-03-31/functions/arn:aws:lambda:${DEPLOY_REGION}:${SDPR_ACCOUNT_ID}:function:${CORS_LAMBDA_NAME}/invocations",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws_proxy"
        }
      }
    },
    "/v1/accounts/{userid}/vehicles/{vin}/servicescheduler/repairservices": {
      "get": {
        "tags": [
          "Service Scheduler"
        ],
        "summary": "Get the list of repair services for a specific vehicle.",
        "description": "This API returns the list of repair services for a specific vehicle.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "mileage",
            "description": "distance in mileage",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "userid",
            "description": "unique identifier of user - Gigya id for user",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "vin",
            "description": "Vehicle Identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-clientapp-name",
            "description": "Name of the Client application",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "x-clientapp-version",
            "description": "Version of the client applications software",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "content-type",
            "description": "application/json ",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-api-key",
            "description": "API key for the Service ",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "clientrequestid",
            "description": "To be generated by Client (Last 10 digits of uid_epoch_6digit random)",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "Locale",
            "description": "Locale of user. Coded according to ISO-639 (e.g. “en”) and optionally extended by a country code (e.g. “en_US”).  ",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "x-device-id",
            "description": "An identifier that uniquely identifies the client device, or calling system like IMEI code. optional for webapp",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "x-originator-type",
            "description": "The originating clients type: app, web ,server",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "dealer-authorization",
            "description": "oss token got by the dealer",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "schema": {
              "$ref": "#/definitions/ServicesResponse"
            }
          },
          "400": {
            "description": "400 response",
            "schema": {
              "$ref": "#/definitions/Router400ErrorResponse"
            }
          },
          "401": {
            "description": "401 response",
            "schema": {
              "$ref": "#/definitions/Router401ErrorResponse"
            }
          },
          "403": {
            "description": "403 response",
            "schema": {
              "$ref": "#/definitions/Router403ErrorResponse"
            }
          },
          "500": {
            "description": "500 response",
            "schema": {
              "$ref": "#/definitions/Router500ErrorResponse"
            }
          },
          "502": {
            "description": "502 response",
            "schema": {
              "$ref": "#/definitions/Router502ErrorResponse"
            }
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "sigv4": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "uri": "arn:aws:apigateway:${DEPLOY_REGION}:lambda:path/2015-03-31/functions/arn:aws:lambda:${DEPLOY_REGION}:${SDPR_ACCOUNT_ID}:function:SDPR_${FEATURE_CODE}_${ENVIRONMENT}_${DEPLOY_REGION}_SC001-service-scheduler-manager:gsdp/invocations",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws_proxy"
        }
      },
      "options": {
        "responses": {},
        "x-amazon-apigateway-integration": {
          "credentials": "arn:aws:iam::${SDPR_ACCOUNT_ID}:role/${CORS_LAMBDA_INVOKE_ROLE_NAME}",
          "uri": "arn:aws:apigateway:${DEPLOY_REGION}:lambda:path/2015-03-31/functions/arn:aws:lambda:${DEPLOY_REGION}:${SDPR_ACCOUNT_ID}:function:${CORS_LAMBDA_NAME}/invocations",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws_proxy"
        }
      }
    },
    "/v1/servicescheduler/search": {
      "get": {
        "tags": [
          "Service Scheduler"
        ],
        "summary": "Performs a search of a customer in the OSS system by email.",
        "description": "This API performs a search of a customer in the OSS system by email.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "x-clientapp-name",
            "description": "Name of the Client application",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "x-clientapp-version",
            "description": "Version of the client applications software",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "content-type",
            "description": "application/json ",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-api-key",
            "description": "API key for the Service ",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "clientrequestid",
            "description": "To be generated by Client (Last 10 digits of uid_epoch_6digit random)",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "Locale",
            "description": "Locale of user. Coded according to ISO-639 (e.g. “en”) and optionally extended by a country code (e.g. “en_US”).  ",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "x-device-id",
            "description": "An identifier that uniquely identifies the client device, or calling system like IMEI code. optional for webapp",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "x-originator-type",
            "description": "The originating clients type: app, web ,server",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "dealer-authorization",
            "description": "oss token got by the dealer",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "email",
            "description": "email for searching the customer",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "schema": {
              "$ref": "#/definitions/SearchEmail"
            }
          },
          "400": {
            "description": "400 response",
            "schema": {
              "$ref": "#/definitions/Router400ErrorResponse"
            }
          },
          "401": {
            "description": "401 response",
            "schema": {
              "$ref": "#/definitions/Router401ErrorResponse"
            }
          },
          "403": {
            "description": "403 response",
            "schema": {
              "$ref": "#/definitions/Router403ErrorResponse"
            }
          },
          "500": {
            "description": "500 response",
            "schema": {
              "$ref": "#/definitions/Router500ErrorResponse"
            }
          },
          "502": {
            "description": "502 response",
            "schema": {
              "$ref": "#/definitions/Router502ErrorResponse"
            }
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "sigv4": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "uri": "arn:aws:apigateway:${DEPLOY_REGION}:lambda:path/2015-03-31/functions/arn:aws:lambda:${DEPLOY_REGION}:${SDPR_ACCOUNT_ID}:function:SDPR_${FEATURE_CODE}_${ENVIRONMENT}_${DEPLOY_REGION}_SC001-service-scheduler-manager:gsdp/invocations",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws_proxy"
        }
      },
      "options": {
        "responses": {},
        "x-amazon-apigateway-integration": {
          "credentials": "arn:aws:iam::${SDPR_ACCOUNT_ID}:role/${CORS_LAMBDA_INVOKE_ROLE_NAME}",
          "uri": "arn:aws:apigateway:${DEPLOY_REGION}:lambda:path/2015-03-31/functions/arn:aws:lambda:${DEPLOY_REGION}:${SDPR_ACCOUNT_ID}:function:${CORS_LAMBDA_NAME}/invocations",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws_proxy"
        }
      }
    },
    "/v1/accounts/{userid}/vehicles/{vin}/servicescheduler/search": {
      "get": {
        "tags": [
          "Service Scheduler"
        ],
        "summary": "Performs a search of a customer in the Oss system by vin.",
        "description": "This API performs a search of a customer in the Oss system by vin.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userid",
            "description": "unique identifier of user - Gigya id for user",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "vin",
            "description": "Vehicle Identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-clientapp-name",
            "description": "Name of the Client application",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "x-clientapp-version",
            "description": "Version of the client applications software",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "content-type",
            "description": "application/json ",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-api-key",
            "description": "API key for the Service ",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "clientrequestid",
            "description": "To be generated by Client (Last 10 digits of uid_epoch_6digit random)",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "Locale",
            "description": "Locale of user. Coded according to ISO-639 (e.g. “en”) and optionally extended by a country code (e.g. “en_US”).  ",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "x-device-id",
            "description": "An identifier that uniquely identifies the client device, or calling system like IMEI code. optional for webapp",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "x-originator-type",
            "description": "The originating clients type: app, web ,server",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "dealer-authorization",
            "description": "oss token got by the dealer",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "schema": {
              "$ref": "#/definitions/SearchVin"
            }
          },
          "400": {
            "description": "400 response",
            "schema": {
              "$ref": "#/definitions/Router400ErrorResponse"
            }
          },
          "401": {
            "description": "401 response",
            "schema": {
              "$ref": "#/definitions/Router401ErrorResponse"
            }
          },
          "403": {
            "description": "403 response",
            "schema": {
              "$ref": "#/definitions/Router403ErrorResponse"
            }
          },
          "500": {
            "description": "500 response",
            "schema": {
              "$ref": "#/definitions/Router500ErrorResponse"
            }
          },
          "502": {
            "description": "502 response",
            "schema": {
              "$ref": "#/definitions/Router502ErrorResponse"
            }
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "sigv4": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "uri": "arn:aws:apigateway:${DEPLOY_REGION}:lambda:path/2015-03-31/functions/arn:aws:lambda:${DEPLOY_REGION}:${SDPR_ACCOUNT_ID}:function:SDPR_${FEATURE_CODE}_${ENVIRONMENT}_${DEPLOY_REGION}_SC001-service-scheduler-manager:gsdp/invocations",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws_proxy"
        }
      },
      "options": {
        "responses": {},
        "x-amazon-apigateway-integration": {
          "credentials": "arn:aws:iam::${SDPR_ACCOUNT_ID}:role/${CORS_LAMBDA_INVOKE_ROLE_NAME}",
          "uri": "arn:aws:apigateway:${DEPLOY_REGION}:lambda:path/2015-03-31/functions/arn:aws:lambda:${DEPLOY_REGION}:${SDPR_ACCOUNT_ID}:function:${CORS_LAMBDA_NAME}/invocations",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws_proxy"
        }
      }
    },
    "/v1/servicescheduler/dealerdepartment": {
      "post": {
        "tags": [
          "Service Scheduler"
        ],
        "summary": "Returns the department for services.",
        "description": "This API returns the department for services.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "list of services.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "servicesList": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ServiceId"
                  }
                }
              }
            }
          },
          {
            "name": "x-clientapp-name",
            "description": "Name of the Client application",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "x-clientapp-version",
            "description": "Version of the client applications software",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "content-type",
            "description": "application/json ",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-api-key",
            "description": "API key for the Service ",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "clientrequestid",
            "description": "To be generated by Client (Last 10 digits of uid_epoch_6digit random)",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "Locale",
            "description": "Locale of user. Coded according to ISO-639 (e.g. “en”) and optionally extended by a country code (e.g. “en_US”).  ",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "x-device-id",
            "description": "An identifier that uniquely identifies the client device, or calling system like IMEI code. optional for webapp",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "x-originator-type",
            "description": "The originating clients type: app, web ,server",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "dealer-authorization",
            "description": "oss token got by the dealer",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "schema": {
              "$ref": "#/definitions/DealerDepartmentResponse"
            }
          },
          "400": {
            "description": "400 response",
            "schema": {
              "$ref": "#/definitions/Router400ErrorResponse"
            }
          },
          "401": {
            "description": "401 response",
            "schema": {
              "$ref": "#/definitions/Router401ErrorResponse"
            }
          },
          "403": {
            "description": "403 response",
            "schema": {
              "$ref": "#/definitions/Router403ErrorResponse"
            }
          },
          "500": {
            "description": "500 response",
            "schema": {
              "$ref": "#/definitions/Router500ErrorResponse"
            }
          },
          "502": {
            "description": "502 response",
            "schema": {
              "$ref": "#/definitions/Router502ErrorResponse"
            }
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "sigv4": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "uri": "arn:aws:apigateway:${DEPLOY_REGION}:lambda:path/2015-03-31/functions/arn:aws:lambda:${DEPLOY_REGION}:${SDPR_ACCOUNT_ID}:function:SDPR_${FEATURE_CODE}_${ENVIRONMENT}_${DEPLOY_REGION}_SC001-service-scheduler-manager:gsdp/invocations",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws_proxy"
        }
      },
      "options": {
        "responses": {},
        "x-amazon-apigateway-integration": {
          "credentials": "arn:aws:iam::${SDPR_ACCOUNT_ID}:role/${CORS_LAMBDA_INVOKE_ROLE_NAME}",
          "uri": "arn:aws:apigateway:${DEPLOY_REGION}:lambda:path/2015-03-31/functions/arn:aws:lambda:${DEPLOY_REGION}:${SDPR_ACCOUNT_ID}:function:${CORS_LAMBDA_NAME}/invocations",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws_proxy"
        }
      }
    },
    "/v1/servicescheduler/appointmentsummary": {
      "post": {
        "tags": [
          "Service Scheduler"
        ],
        "summary": "Returns the summary costs for the appointment.",
        "description": "This API returns the summary costs for the appointment.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "list of services.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "servicesList": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ServiceId"
                  }
                }
              }
            }
          },
          {
            "name": "x-clientapp-name",
            "description": "Name of the Client application",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "x-clientapp-version",
            "description": "Version of the client applications software",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "content-type",
            "description": "application/json ",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-api-key",
            "description": "API key for the Service ",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "clientrequestid",
            "description": "To be generated by Client (Last 10 digits of uid_epoch_6digit random)",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "Locale",
            "description": "Locale of user. Coded according to ISO-639 (e.g. “en”) and optionally extended by a country code (e.g. “en_US”).  ",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "x-device-id",
            "description": "An identifier that uniquely identifies the client device, or calling system like IMEI code. optional for webapp",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "x-originator-type",
            "description": "The originating clients type: app, web ,server",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "dealer-authorization",
            "description": "oss token got by the dealer",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "schema": {
              "$ref": "#/definitions/AppointmentSummaryResponse"
            }
          },
          "400": {
            "description": "400 response",
            "schema": {
              "$ref": "#/definitions/Router400ErrorResponse"
            }
          },
          "401": {
            "description": "401 response",
            "schema": {
              "$ref": "#/definitions/Router401ErrorResponse"
            }
          },
          "403": {
            "description": "403 response",
            "schema": {
              "$ref": "#/definitions/Router403ErrorResponse"
            }
          },
          "500": {
            "description": "500 response",
            "schema": {
              "$ref": "#/definitions/Router500ErrorResponse"
            }
          },
          "502": {
            "description": "502 response",
            "schema": {
              "$ref": "#/definitions/Router502ErrorResponse"
            }
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "sigv4": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "uri": "arn:aws:apigateway:${DEPLOY_REGION}:lambda:path/2015-03-31/functions/arn:aws:lambda:${DEPLOY_REGION}:${SDPR_ACCOUNT_ID}:function:SDPR_${FEATURE_CODE}_${ENVIRONMENT}_${DEPLOY_REGION}_SC001-service-scheduler-manager:gsdp/invocations",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws_proxy"
        }
      },
      "options": {
        "responses": {},
        "x-amazon-apigateway-integration": {
          "credentials": "arn:aws:iam::${SDPR_ACCOUNT_ID}:role/${CORS_LAMBDA_INVOKE_ROLE_NAME}",
          "uri": "arn:aws:apigateway:${DEPLOY_REGION}:lambda:path/2015-03-31/functions/arn:aws:lambda:${DEPLOY_REGION}:${SDPR_ACCOUNT_ID}:function:${CORS_LAMBDA_NAME}/invocations",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws_proxy"
        }
      }
    },
    "/v1/servicescheduler/department/{departmentid}/advisors": {
      "get": {
        "tags": [
          "Service Scheduler"
        ],
        "summary": "Returns the list of advisors for a specific dealer department.",
        "description": "This API returns the list of advisors for a specific dealer department.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "departmentid",
            "description": "unique identifier of the department",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-clientapp-name",
            "description": "Name of the Client application",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "x-clientapp-version",
            "description": "Version of the client applications software",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "content-type",
            "description": "application/json ",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-api-key",
            "description": "API key for the Service ",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "clientrequestid",
            "description": "To be generated by Client (Last 10 digits of uid_epoch_6digit random)",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "Locale",
            "description": "Locale of user. Coded according to ISO-639 (e.g. “en”) and optionally extended by a country code (e.g. “en_US”).  ",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "x-device-id",
            "description": "An identifier that uniquely identifies the client device, or calling system like IMEI code. optional for webapp",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "x-originator-type",
            "description": "The originating clients type: app, web ,server",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "dealer-authorization",
            "description": "oss token got by the dealer",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "schema": {
              "$ref": "#/definitions/GetAdvisorsResponse"
            }
          },
          "400": {
            "description": "400 response",
            "schema": {
              "$ref": "#/definitions/Router400ErrorResponse"
            }
          },
          "401": {
            "description": "401 response",
            "schema": {
              "$ref": "#/definitions/Router401ErrorResponse"
            }
          },
          "403": {
            "description": "403 response",
            "schema": {
              "$ref": "#/definitions/Router403ErrorResponse"
            }
          },
          "500": {
            "description": "500 response",
            "schema": {
              "$ref": "#/definitions/Router500ErrorResponse"
            }
          },
          "502": {
            "description": "502 response",
            "schema": {
              "$ref": "#/definitions/Router502ErrorResponse"
            }
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "sigv4": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "uri": "arn:aws:apigateway:${DEPLOY_REGION}:lambda:path/2015-03-31/functions/arn:aws:lambda:${DEPLOY_REGION}:${SDPR_ACCOUNT_ID}:function:SDPR_${FEATURE_CODE}_${ENVIRONMENT}_${DEPLOY_REGION}_SC001-service-scheduler-manager:gsdp/invocations",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws_proxy"
        }
      },
      "options": {
        "responses": {},
        "x-amazon-apigateway-integration": {
          "credentials": "arn:aws:iam::${SDPR_ACCOUNT_ID}:role/${CORS_LAMBDA_INVOKE_ROLE_NAME}",
          "uri": "arn:aws:apigateway:${DEPLOY_REGION}:lambda:path/2015-03-31/functions/arn:aws:lambda:${DEPLOY_REGION}:${SDPR_ACCOUNT_ID}:function:${CORS_LAMBDA_NAME}/invocations",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws_proxy"
        }
      }
    },
    "/v1/servicescheduler/department/{departmentid}/transportationoption": {
      "get": {
        "tags": [
          "Service Scheduler"
        ],
        "summary": "Returns the list of transportation options for a specific dealer department.",
        "description": "This API returns the list of transportation options for a specific dealer department.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "departmentid",
            "description": "unique identifier of the department",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-clientapp-name",
            "description": "Name of the Client application",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "x-clientapp-version",
            "description": "Version of the client applications software",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "content-type",
            "description": "application/json ",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-api-key",
            "description": "API key for the Service ",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "clientrequestid",
            "description": "To be generated by Client (Last 10 digits of uid_epoch_6digit random)",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "Locale",
            "description": "Locale of user. Coded according to ISO-639 (e.g. “en”) and optionally extended by a country code (e.g. “en_US”).  ",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "x-device-id",
            "description": "An identifier that uniquely identifies the client device, or calling system like IMEI code. optional for webapp",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "x-originator-type",
            "description": "The originating clients type: app, web ,server",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "dealer-authorization",
            "description": "oss token got by the dealer",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "schema": {
              "$ref": "#/definitions/TransportationOptionResponse"
            }
          },
          "400": {
            "description": "400 response",
            "schema": {
              "$ref": "#/definitions/Router400ErrorResponse"
            }
          },
          "401": {
            "description": "401 response",
            "schema": {
              "$ref": "#/definitions/Router401ErrorResponse"
            }
          },
          "403": {
            "description": "403 response",
            "schema": {
              "$ref": "#/definitions/Router403ErrorResponse"
            }
          },
          "500": {
            "description": "500 response",
            "schema": {
              "$ref": "#/definitions/Router500ErrorResponse"
            }
          },
          "502": {
            "description": "502 response",
            "schema": {
              "$ref": "#/definitions/Router502ErrorResponse"
            }
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "sigv4": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "uri": "arn:aws:apigateway:${DEPLOY_REGION}:lambda:path/2015-03-31/functions/arn:aws:lambda:${DEPLOY_REGION}:${SDPR_ACCOUNT_ID}:function:SDPR_${FEATURE_CODE}_${ENVIRONMENT}_${DEPLOY_REGION}_SC001-service-scheduler-manager:gsdp/invocations",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws_proxy"
        }
      },
      "options": {
        "responses": {},
        "x-amazon-apigateway-integration": {
          "credentials": "arn:aws:iam::${SDPR_ACCOUNT_ID}:role/${CORS_LAMBDA_INVOKE_ROLE_NAME}",
          "uri": "arn:aws:apigateway:${DEPLOY_REGION}:lambda:path/2015-03-31/functions/arn:aws:lambda:${DEPLOY_REGION}:${SDPR_ACCOUNT_ID}:function:${CORS_LAMBDA_NAME}/invocations",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws_proxy"
        }
      }
    },
    "/v1/servicescheduler/department/{departmentid}/timesegments": {
      "get": {
        "tags": [
          "Service Scheduler"
        ],
        "summary": "Returns the list of time segments for a specific dealer department.",
        "description": "This API returns the list of time segments for a specific dealer department.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "departmentid",
            "description": "unique identifier of the department",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-clientapp-name",
            "description": "Name of the Client application",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "x-clientapp-version",
            "description": "Version of the client applications software",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "content-type",
            "description": "application/json ",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-api-key",
            "description": "API key for the Service ",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "clientrequestid",
            "description": "To be generated by Client (Last 10 digits of uid_epoch_6digit random)",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "Locale",
            "description": "Locale of user. Coded according to ISO-639 (e.g. “en”) and optionally extended by a country code (e.g. “en_US”).  ",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "x-device-id",
            "description": "An identifier that uniquely identifies the client device, or calling system like IMEI code. optional for webapp",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "x-originator-type",
            "description": "The originating clients type: app, web ,server",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "dealer-authorization",
            "description": "oss token got by the dealer",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "startdate",
            "description": "starting date for the research ( timestamp )",
            "in": "query",
            "required": true,
            "type": "integer"
          },
          {
            "name": "enddate",
            "description": "ending date for the research ( timestamp )",
            "in": "query",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "schema": {
              "$ref": "#/definitions/TimeSegmentsResponse"
            }
          },
          "400": {
            "description": "400 response",
            "schema": {
              "$ref": "#/definitions/Router400ErrorResponse"
            }
          },
          "401": {
            "description": "401 response",
            "schema": {
              "$ref": "#/definitions/Router401ErrorResponse"
            }
          },
          "403": {
            "description": "403 response",
            "schema": {
              "$ref": "#/definitions/Router403ErrorResponse"
            }
          },
          "500": {
            "description": "500 response",
            "schema": {
              "$ref": "#/definitions/Router500ErrorResponse"
            }
          },
          "502": {
            "description": "502 response",
            "schema": {
              "$ref": "#/definitions/Router502ErrorResponse"
            }
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "sigv4": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "uri": "arn:aws:apigateway:${DEPLOY_REGION}:lambda:path/2015-03-31/functions/arn:aws:lambda:${DEPLOY_REGION}:${SDPR_ACCOUNT_ID}:function:SDPR_${FEATURE_CODE}_${ENVIRONMENT}_${DEPLOY_REGION}_SC001-service-scheduler-manager:gsdp/invocations",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws_proxy"
        }
      },
      "options": {
        "responses": {},
        "x-amazon-apigateway-integration": {
          "credentials": "arn:aws:iam::${SDPR_ACCOUNT_ID}:role/${CORS_LAMBDA_INVOKE_ROLE_NAME}",
          "uri": "arn:aws:apigateway:${DEPLOY_REGION}:lambda:path/2015-03-31/functions/arn:aws:lambda:${DEPLOY_REGION}:${SDPR_ACCOUNT_ID}:function:${CORS_LAMBDA_NAME}/invocations",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws_proxy"
        }
      }
    },
    "/v1/accounts/{userid}/vehicles/{vin}/servicescheduler/department/{departmentid}/appointment": {
      "post": {
        "tags": [
          "Service Scheduler"
        ],
        "summary": "Creates a new appointment",
        "description": "This API Creates a new appointment.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Create a new appointment.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostAppointmentRequest"
            }
          },
          {
            "name": "userid",
            "description": "unique identifier of user - Gigya id for user",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "vin",
            "description": "Vehicle Identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "departmentid",
            "description": "unique identifier of the department",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-clientapp-name",
            "description": "Name of the Client application",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "x-clientapp-version",
            "description": "Version of the client applications software",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "content-type",
            "description": "application/json ",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-api-key",
            "description": "API key for the Service ",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "clientrequestid",
            "description": "To be generated by Client (Last 10 digits of uid_epoch_6digit random)",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "Locale",
            "description": "Locale of user. Coded according to ISO-639 (e.g. “en”) and optionally extended by a country code (e.g. “en_US”).  ",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "x-device-id",
            "description": "An identifier that uniquely identifies the client device, or calling system like IMEI code. optional for webapp",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "x-originator-type",
            "description": "The originating clients type: app, web ,server",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "dealer-authorization",
            "description": "oss token got by the dealer",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "schema": {
              "$ref": "#/definitions/PostAppointmentResponse"
            }
          },
          "400": {
            "description": "400 response",
            "schema": {
              "$ref": "#/definitions/Router400ErrorResponse"
            }
          },
          "401": {
            "description": "401 response",
            "schema": {
              "$ref": "#/definitions/Router401ErrorResponse"
            }
          },
          "403": {
            "description": "403 response",
            "schema": {
              "$ref": "#/definitions/Router403ErrorResponse"
            }
          },
          "500": {
            "description": "500 response",
            "schema": {
              "$ref": "#/definitions/Router500ErrorResponse"
            }
          },
          "502": {
            "description": "502 response",
            "schema": {
              "$ref": "#/definitions/Router502ErrorResponse"
            }
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "sigv4": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "uri": "arn:aws:apigateway:${DEPLOY_REGION}:lambda:path/2015-03-31/functions/arn:aws:lambda:${DEPLOY_REGION}:${SDPR_ACCOUNT_ID}:function:SDPR_${FEATURE_CODE}_${ENVIRONMENT}_${DEPLOY_REGION}_SC001-service-scheduler-manager:gsdp/invocations",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws_proxy"
        }
      },
      "options": {
        "responses": {},
        "x-amazon-apigateway-integration": {
          "credentials": "arn:aws:iam::${SDPR_ACCOUNT_ID}:role/${CORS_LAMBDA_INVOKE_ROLE_NAME}",
          "uri": "arn:aws:apigateway:${DEPLOY_REGION}:lambda:path/2015-03-31/functions/arn:aws:lambda:${DEPLOY_REGION}:${SDPR_ACCOUNT_ID}:function:${CORS_LAMBDA_NAME}/invocations",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws_proxy"
        }
      }
    },
    "/v1/accounts/{userid}/vehicles/{vin}/servicescheduler/appointments": {
      "get": {
        "tags": [
          "Service Scheduler"
        ],
        "summary": "Returns the list of services scheduled for a specific vehicle to a specific dealer.",
        "description": "This API returns the list of services scheduled for a specific vehicle to a specific dealer.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userid",
            "description": "unique identifier of user - Gigya id for user",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "vin",
            "description": "Vehicle Identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-clientapp-name",
            "description": "Name of the Client application",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "x-clientapp-version",
            "description": "Version of the client applications software",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "content-type",
            "description": "application/json ",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-api-key",
            "description": "API key for the Service ",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "clientrequestid",
            "description": "To be generated by Client (Last 10 digits of uid_epoch_6digit random)",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "Locale",
            "description": "Locale of user. Coded according to ISO-639 (e.g. “en”) and optionally extended by a country code (e.g. “en_US”).  ",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "x-device-id",
            "description": "An identifier that uniquely identifies the client device, or calling system like IMEI code. optional for webapp",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "x-originator-type",
            "description": "The originating clients type: app, web ,server",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "dealer-authorization",
            "description": "oss token got by the dealer",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "schema": {
              "$ref": "#/definitions/GetServiceAppointmentResponse"
            }
          },
          "400": {
            "description": "400 response",
            "schema": {
              "$ref": "#/definitions/Router400ErrorResponse"
            }
          },
          "401": {
            "description": "401 response",
            "schema": {
              "$ref": "#/definitions/Router401ErrorResponse"
            }
          },
          "403": {
            "description": "403 response",
            "schema": {
              "$ref": "#/definitions/Router403ErrorResponse"
            }
          },
          "500": {
            "description": "500 response",
            "schema": {
              "$ref": "#/definitions/Router500ErrorResponse"
            }
          },
          "502": {
            "description": "502 response",
            "schema": {
              "$ref": "#/definitions/Router502ErrorResponse"
            }
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "sigv4": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "uri": "arn:aws:apigateway:${DEPLOY_REGION}:lambda:path/2015-03-31/functions/arn:aws:lambda:${DEPLOY_REGION}:${SDPR_ACCOUNT_ID}:function:SDPR_${FEATURE_CODE}_${ENVIRONMENT}_${DEPLOY_REGION}_SC001-service-scheduler-manager:gsdp/invocations",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws_proxy"
        }
      },
      "options": {
        "responses": {},
        "x-amazon-apigateway-integration": {
          "credentials": "arn:aws:iam::${SDPR_ACCOUNT_ID}:role/${CORS_LAMBDA_INVOKE_ROLE_NAME}",
          "uri": "arn:aws:apigateway:${DEPLOY_REGION}:lambda:path/2015-03-31/functions/arn:aws:lambda:${DEPLOY_REGION}:${SDPR_ACCOUNT_ID}:function:${CORS_LAMBDA_NAME}/invocations",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws_proxy"
        }
      }
    },
    "/v1/accounts/{userid}/vehicles/{vin}/servicescheduler/department/{departmentid}/appointment/{appointmentid}": {
      "delete": {
        "tags": [
          "Service Scheduler"
        ],
        "summary": "Delete a specific appointment.",
        "description": "This API delete a specific appointment.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userid",
            "description": "unique identifier of user - Gigya id for user",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "vin",
            "description": "Vehicle Identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "appointmentid",
            "description": "unique identifier of the appointment",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "departmentid",
            "description": "unique identifier of the department",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-clientapp-name",
            "description": "Name of the Client application",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "x-clientapp-version",
            "description": "Version of the client applications software",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "content-type",
            "description": "application/json ",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-api-key",
            "description": "API key for the Service ",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "clientrequestid",
            "description": "To be generated by Client (Last 10 digits of uid_epoch_6digit random)",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "Locale",
            "description": "Locale of user. Coded according to ISO-639 (e.g. “en”) and optionally extended by a country code (e.g. “en_US”).  ",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "x-device-id",
            "description": "An identifier that uniquely identifies the client device, or calling system like IMEI code. optional for webapp",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "x-originator-type",
            "description": "The originating clients type: app, web ,server",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "dealer-authorization",
            "description": "oss token got by the dealer",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "400 response",
            "schema": {
              "$ref": "#/definitions/Router400ErrorResponse"
            }
          },
          "401": {
            "description": "401 response",
            "schema": {
              "$ref": "#/definitions/Router401ErrorResponse"
            }
          },
          "403": {
            "description": "403 response",
            "schema": {
              "$ref": "#/definitions/Router403ErrorResponse"
            }
          },
          "500": {
            "description": "500 response",
            "schema": {
              "$ref": "#/definitions/Router500ErrorResponse"
            }
          },
          "502": {
            "description": "502 response",
            "schema": {
              "$ref": "#/definitions/Router502ErrorResponse"
            }
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "sigv4": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "uri": "arn:aws:apigateway:${DEPLOY_REGION}:lambda:path/2015-03-31/functions/arn:aws:lambda:${DEPLOY_REGION}:${SDPR_ACCOUNT_ID}:function:SDPR_${FEATURE_CODE}_${ENVIRONMENT}_${DEPLOY_REGION}_SC001-service-scheduler-manager:gsdp/invocations",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws_proxy"
        }
      },
      "put": {
        "tags": [
          "Service Scheduler"
        ],
        "summary": "Update an appointment for a service.",
        "description": "This API updates an appointment for a service.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "update an appointment.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutAppointmentRequest"
            }
          },
          {
            "name": "userid",
            "description": "unique identifier of user - Gigya id for user",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "vin",
            "description": "Vehicle Identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "appointmentid",
            "description": "unique identifier of the appointment",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "departmentid",
            "description": "unique identifier of the department",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-clientapp-name",
            "description": "Name of the Client application",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "x-clientapp-version",
            "description": "Version of the client applications software",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "content-type",
            "description": "application/json ",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-api-key",
            "description": "API key for the Service ",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "clientrequestid",
            "description": "To be generated by Client (Last 10 digits of uid_epoch_6digit random)",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "Locale",
            "description": "Locale of user. Coded according to ISO-639 (e.g. “en”) and optionally extended by a country code (e.g. “en_US”).  ",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "x-device-id",
            "description": "An identifier that uniquely identifies the client device, or calling system like IMEI code. optional for webapp",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "x-originator-type",
            "description": "The originating clients type: app, web ,server",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "dealer-authorization",
            "description": "oss token got by the dealer",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "schema": {
              "$ref": "#/definitions/PutUpdateResponse"
            }
          },
          "400": {
            "description": "400 response",
            "schema": {
              "$ref": "#/definitions/Router400ErrorResponse"
            }
          },
          "401": {
            "description": "401 response",
            "schema": {
              "$ref": "#/definitions/Router401ErrorResponse"
            }
          },
          "403": {
            "description": "403 response",
            "schema": {
              "$ref": "#/definitions/Router403ErrorResponse"
            }
          },
          "500": {
            "description": "500 response",
            "schema": {
              "$ref": "#/definitions/Router500ErrorResponse"
            }
          },
          "502": {
            "description": "502 response",
            "schema": {
              "$ref": "#/definitions/Router502ErrorResponse"
            }
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "sigv4": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "uri": "arn:aws:apigateway:${DEPLOY_REGION}:lambda:path/2015-03-31/functions/arn:aws:lambda:${DEPLOY_REGION}:${SDPR_ACCOUNT_ID}:function:SDPR_${FEATURE_CODE}_${ENVIRONMENT}_${DEPLOY_REGION}_SC001-service-scheduler-manager:gsdp/invocations",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws_proxy"
        }
      },
      "get": {
        "tags": [
          "Service Scheduler"
        ],
        "summary": "Returns the details for a specific appointment.",
        "description": "This API returns the details for a specific appointment.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userid",
            "description": "unique identifier of user - Gigya id for user",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "vin",
            "description": "Vehicle Identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "appointmentid",
            "description": "unique identifier of the appointment",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "departmentid",
            "description": "unique identifier of the department",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-clientapp-name",
            "description": "Name of the Client application",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "x-clientapp-version",
            "description": "Version of the client applications software",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "content-type",
            "description": "application/json ",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-api-key",
            "description": "API key for the Service ",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "clientrequestid",
            "description": "To be generated by Client (Last 10 digits of uid_epoch_6digit random)",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "Locale",
            "description": "Locale of user. Coded according to ISO-639 (e.g. “en”) and optionally extended by a country code (e.g. “en_US”).  ",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "x-device-id",
            "description": "An identifier that uniquely identifies the client device, or calling system like IMEI code. optional for webapp",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "x-originator-type",
            "description": "The originating clients type: app, web ,server",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "dealer-authorization",
            "description": "oss token got by the dealer",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "schema": {
              "$ref": "#/definitions/GetAppointmentDetailsResponse"
            }
          },
          "400": {
            "description": "400 response",
            "schema": {
              "$ref": "#/definitions/Router400ErrorResponse"
            }
          },
          "401": {
            "description": "401 response",
            "schema": {
              "$ref": "#/definitions/Router401ErrorResponse"
            }
          },
          "403": {
            "description": "403 response",
            "schema": {
              "$ref": "#/definitions/Router403ErrorResponse"
            }
          },
          "500": {
            "description": "500 response",
            "schema": {
              "$ref": "#/definitions/Router500ErrorResponse"
            }
          },
          "502": {
            "description": "502 response",
            "schema": {
              "$ref": "#/definitions/Router502ErrorResponse"
            }
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "sigv4": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "uri": "arn:aws:apigateway:${DEPLOY_REGION}:lambda:path/2015-03-31/functions/arn:aws:lambda:${DEPLOY_REGION}:${SDPR_ACCOUNT_ID}:function:SDPR_${FEATURE_CODE}_${ENVIRONMENT}_${DEPLOY_REGION}_SC001-service-scheduler-manager:gsdp/invocations",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws_proxy"
        }
      },
      "options": {
        "responses": {},
        "x-amazon-apigateway-integration": {
          "credentials": "arn:aws:iam::${SDPR_ACCOUNT_ID}:role/${CORS_LAMBDA_INVOKE_ROLE_NAME}",
          "uri": "arn:aws:apigateway:${DEPLOY_REGION}:lambda:path/2015-03-31/functions/arn:aws:lambda:${DEPLOY_REGION}:${SDPR_ACCOUNT_ID}:function:${CORS_LAMBDA_NAME}/invocations",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws_proxy"
        }
      }
    }
  }
}