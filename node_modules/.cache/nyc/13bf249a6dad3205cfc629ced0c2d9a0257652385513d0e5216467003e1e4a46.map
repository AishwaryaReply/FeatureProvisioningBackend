{"version":3,"file":"C:/Backend/FeatureProvisioningBackend/src/lambdas/ServiceSchedulerManager/test/features/features-handler-test.ts","sources":["C:/Backend/FeatureProvisioningBackend/src/lambdas/ServiceSchedulerManager/test/features/features-handler-test.ts"],"names":[],"mappings":"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","sourcesContent":["import 'mocha'\r\nimport chai from 'chai'\r\nimport chaiAsPromised from 'chai-as-promised'\r\nimport { FeaturesHandler } from '../../src/features';\r\nimport { stubsHandler  } from './utils/stubs-handler'\r\nimport { GCVErrors } from 'gcv-utils';\r\n\r\nchai.use(chaiAsPromised)\r\nconst expect = chai.expect;\r\n\r\ndescribe('FeaturesHandler', () => {\r\n    const testedFeaturesHandler = new FeaturesHandler();\r\n\r\n    describe('getFeatureParams', () => {\r\n\r\n\r\n        it('should give the correct output while calling FEATURE_SEARCH_LIST', () => {\r\n            const expected= testedFeaturesHandler.getServiceRequested(stubsHandler.mockInputEventGetFeature.runTimeInfo);\r\n            expect(expected).to.be.eqls(\"FEATURE_SEARCH_LIST\");\r\n        })\r\n\r\n        it('should give an error while calling FEATURE_SEARCH_LIST', () => {\r\n            const expected= testedFeaturesHandler.getServiceRequested(stubsHandler.mockInputEventGetInvalidPostFeature.runTimeInfo);\r\n            expect(expected).to.not.eqls(\"FEATURE_SEARCH_LIST\");\r\n        })\r\n\r\n        it('should give an error while calling FEATURE_CREATE', () => {\r\n            const expected= testedFeaturesHandler.getServiceRequested(stubsHandler.mockInputEventInvalidDeleteFeature.runTimeInfo);\r\n            expect(expected).to.not.eqls(\"FEATURE_CREATE\");\r\n        })\r\n\r\n        it('testing default section with invalidHttpMethod', () => {\r\n            const expected= testedFeaturesHandler.getServiceRequested(stubsHandler.mockInputEventInvalidHTTPMethod.runTimeInfo);\r\n            expect(expected).to.throw(new GCVErrors.HttpMethodNotAllowed('HttpMethod is not valid'));\r\n        })\r\n    \r\n        it('should give the correct output while calling FEATURE_CREATE', () => {\r\n            const expected= testedFeaturesHandler.getServiceRequested(stubsHandler.mockInputEventPostFeature.runTimeInfo);\r\n            expect(expected).to.be.eqls(\"FEATURE_CREATE\");\r\n        })\r\n\r\n        it('should give the correct output while calling FEATURE_UPDATE', () => {\r\n            const expected= testedFeaturesHandler.getServiceRequested(stubsHandler.mockInputEventPutFeature.runTimeInfo);\r\n            expect(expected).to.be.eqls(\"FEATURE_UPDATE\");\r\n        })\r\n\r\n        it('should give the correct output while calling FEATURE_DELETE by code', () => {\r\n            const expected= testedFeaturesHandler.getServiceRequested(stubsHandler.mockInputEventDeleteFeatureByCode.runTimeInfo);\r\n            expect(expected).to.be.eqls(\"FEATURE_DELETE\");\r\n        })\r\n\r\n        it('should give the correct output while calling FEATURE_DELETE by search', () => {\r\n            const expected= testedFeaturesHandler.getServiceRequested(stubsHandler.mockInputEventDeleteFeatureBySearch.runTimeInfo);\r\n            expect(expected).to.be.eqls(\"FEATURE_DELETE\");\r\n        })\r\n\r\n        it('testing invalid httpMethod and invalid resourcePath', () => {\r\n            const expected= testedFeaturesHandler.getServiceRequested(stubsHandler.mockInputEventInvalidHTTPMethodResourcePath.runTimeInfo);\r\n            expect(expected).to.throw(new GCVErrors.ServiceNotSupported(`service ${stubsHandler.mockInputEventInvalidHTTPMethodResourcePath.runTimeInfo.resourcePath} is not supported`));\r\n        })\r\n\r\n        it('testing valid httpMethod and invalid resourcePath', () => {\r\n            const expected= testedFeaturesHandler.getServiceRequested(stubsHandler.mockInputEventInvalidResourcePath.runTimeInfo);\r\n            expect(expected).to.throw(new GCVErrors.ServiceNotSupported(`service ${stubsHandler.mockInputEventInvalidResourcePath.runTimeInfo.resourcePath} is not supported`));\r\n        })\r\n\r\n\r\n\r\n        //Testing each switch case in prepareRequestData\r\n        it('should give the correct output while calling FEATURE_SEARCH_LIST', () => {\r\n            //const expected= testedFeaturesHandler.getServiceRequested(stubsHandler.mockInputFeatureSearchList.runTimeInfo);\r\n            const output= testedFeaturesHandler.getFeatureParams(stubsHandler.mockInputFeatureSearchList);\r\n            expect(output).to.be.eqls(stubsHandler.mockOutputFeatureSearchList);\r\n        })\r\n\r\n        it('should give the correct output with special character output values, while calling FEATURE_SEARCH_LIST', () => {\r\n            const output= testedFeaturesHandler.getFeatureParams(stubsHandler.mockInputFeatureSearchList);\r\n            expect(output).to.be.eqls(stubsHandler.mockOutputFeatureSearchListSpecialChar);\r\n        })\r\n\r\n        it('should give an error while calling FEATURE_SEARCH_LIST', () => {\r\n            const output= testedFeaturesHandler.getFeatureParams(stubsHandler.mockInputFeatureSearchListInvalidPath);\r\n            expect(output).to.not.eqls(stubsHandler.mockOutputFeatureSearchList);\r\n        })\r\n\r\n        it('should give an error while calling FEATURE_SEARCH_LIST', () => {\r\n            const output= testedFeaturesHandler.getFeatureParams(stubsHandler.mockInputFeatureSearchList);\r\n            expect(output).to.not.eqls(stubsHandler.mockOutputFeatureSearchListInvalid);\r\n        })\r\n\r\n\r\n        it('should give the correct output while calling FEATURE_CREATE', () => {\r\n            const output= testedFeaturesHandler.getFeatureParams(stubsHandler.mockInputFeatureCreate);\r\n            expect(output).to.be.eqls(stubsHandler.mockOutputFeatureCreate);\r\n        })\r\n\r\n        it('should give the correct output with special character output values, while calling FEATURE_CREATE', () => {\r\n            const output= testedFeaturesHandler.getFeatureParams(stubsHandler.mockInputFeatureCreate);\r\n            expect(output).to.be.eqls(stubsHandler.mockOutputFeatureCreateSpecialChar);\r\n        })\r\n\r\n        it('should give an error while calling FEATURE_CREATE', () => {\r\n            const output= testedFeaturesHandler.getFeatureParams(stubsHandler.mockInputFeatureCreateInvalidPath);\r\n            expect(output).to.not.eqls(stubsHandler.mockOutputFeatureCreate);\r\n        })\r\n\r\n        it('should give an error while calling FEATURE_CREATE', () => {\r\n            const output= testedFeaturesHandler.getFeatureParams(stubsHandler.mockInputFeatureCreate);\r\n            expect(output).to.not.eqls(stubsHandler.mockOutputFeatureCreateInvalid);\r\n        })\r\n\r\n        it('should give the correct output while calling FEATURE_UPDATE', () => {\r\n            const output= testedFeaturesHandler.getFeatureParams(stubsHandler.mockInputFeatureUpdate);\r\n            expect(output).to.be.eqls(stubsHandler.mockOutputFeatureUpdate);\r\n        })\r\n\r\n        it('should give the correct output with special character output values, while calling FEATURE_UPDATE', () => {\r\n            const output= testedFeaturesHandler.getFeatureParams(stubsHandler.mockInputFeatureUpdate);\r\n            expect(output).to.be.eqls(stubsHandler.mockOutputFeatureUpdateSpecialChar);\r\n        })\r\n        \r\n        it('should give an error while calling FEATURE_UPDATE', () => {\r\n            const output= testedFeaturesHandler.getFeatureParams(stubsHandler.mockInputFeatureUpdateinvalidPath);\r\n            expect(output).to.not.eqls(stubsHandler.mockOutputFeatureUpdate);\r\n        })\r\n\r\n        it('should give an error while calling FEATURE_UPDATE', () => {\r\n            const output= testedFeaturesHandler.getFeatureParams(stubsHandler.mockInputFeatureUpdate);\r\n            expect(output).to.not.eqls(stubsHandler.mockOutputFeatureUpdateInvalid);\r\n        })\r\n\r\n        it('should give the correct output while calling FEATURE_DELETE', () => {\r\n            const output= testedFeaturesHandler.getFeatureParams(stubsHandler.mockInputFeatureDeleteByCode);\r\n            expect(output).to.be.eqls(stubsHandler.mockOutputFeatureDeleteByCode);\r\n        })\r\n\r\n        it('should give the correct output with special character output values, while calling FEATURE_DELETE', () => {\r\n            const output= testedFeaturesHandler.getFeatureParams(stubsHandler.mockInputFeatureDeleteByCode);\r\n            expect(output).to.be.eqls(stubsHandler.mockOutputFeatureDeleteByCodeSpecialChar);\r\n        })\r\n\r\n        it('should give an error while calling FEATURE_DELETE', () => {\r\n            const output= testedFeaturesHandler.getFeatureParams(stubsHandler.mockInputFeatureDeleteByCodeInvalidPath);\r\n            expect(output).to.not.eqls(stubsHandler.mockOutputFeatureDeleteByCode);\r\n        })\r\n\r\n        it('should give an error while calling FEATURE_DELETE', () => {\r\n            const output= testedFeaturesHandler.getFeatureParams(stubsHandler.mockInputFeatureDeleteByCode);\r\n            expect(output).to.not.eqls(stubsHandler.mockOutputFeatureDeleteByCodeInvalid);\r\n        })\r\n        \r\n        it('should give the correct output while calling FEATURE_DELETE', () => {\r\n            const output= testedFeaturesHandler.getFeatureParams(stubsHandler.mockInputFeatureDeleteBySearch);\r\n            expect(output).to.be.eqls(stubsHandler.mockOutputFeatureDeleteBySearch);\r\n        })\r\n\r\n        it('should give the correct output with special character output values, while calling FEATURE_DELETE', () => {\r\n            const output= testedFeaturesHandler.getFeatureParams(stubsHandler.mockInputFeatureDeleteBySearch);\r\n            expect(output).to.be.eqls(stubsHandler.mockOutputFeatureDeleteBySearchSpecialChar);\r\n        })\r\n\r\n        it('should give an error while calling FEATURE_DELETE', () => {\r\n            const output= testedFeaturesHandler.getFeatureParams(stubsHandler.mockInputFeatureDeleteBySearchInvalidPath);\r\n            expect(output).to.not.eqls(stubsHandler.mockOutputFeatureDeleteBySearch);\r\n        })\r\n\r\n        it('should give an error while calling FEATURE_DELETE', () => {\r\n            const output= testedFeaturesHandler.getFeatureParams(stubsHandler.mockInputFeatureDeleteBySearch);\r\n            expect(output).to.not.eqls(stubsHandler.mockOutputFeatureDeleteBySearchInvalid);\r\n        })\r\n    })  \r\n\r\n})"]}